#!/usr/bin/env node

const http = require('http');
const app = require('../app');
const { logger } = require('../utils/logger');

// Normalize a port into a number, string, or false
function normalizePort(val) {
  const httpPort = parseInt(val, 10);

  if (Number.isNaN(httpPort)) return val;
  if (httpPort >= 0) return httpPort;
  return false;
}

// Event listener for HTTP server "error" event
function onError({ error, httpPort }) {
  if (error.syscall !== 'listen') throw error;

  const bind = typeof httpPort === 'string' ? `Pipe ${httpPort}` : `Port ${httpPort}`;

  // Handle specific listen errors with friendly messages
  if (error.code === 'EACCES') {
    logger.error(`${bind} requires elevated privileges`);
    process.exit(1);
  }

  if (error.code === 'EADDRINUSE') {
    logger.error(`${bind} is already in use`);
    process.exit(1);
  }

  throw error;
}

// Event listener for HTTP server "listening" event
function onListening(httpServer) {
  const addr = httpServer.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  logger.info({ message: `Listening on ${bind}` });
}

// Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create http server
const server = http.createServer(app);

// Listen on provided port
server.listen(port);

// Add error handler
server.on('error', (error) => onError({ error, httpPort: port }));

// Start listening on port
server.on('listening', () => onListening(server));
